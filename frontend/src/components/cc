"use client"

import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { Edit, Camera, Check, X, Trash2 } from "lucide-react";
import { ChevronUp, ChevronDown } from 'react-feather';
import back2 from "../Asset/back2.png";
import { toast } from 'sonner';

const ProfilePage = () => {
  const [profileData, setProfileData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('posts');
  const [editMode, setEditMode] = useState(false);
  const [showPasswordFields, setShowPasswordFields] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
    image: null
  });
  const [previewImage, setPreviewImage] = useState(null);
  const [fontSize, setFontSize] = useState('medium');
  const navigate = useNavigate();

  // Font size mapping
  const fontSizeMap = {
    small: {
      base: 'text-sm',
      heading: 'text-xl md:text-2xl',
      title: 'text-lg',
      subtitle: 'text-xs',
      button: 'text-sm',
    },
    medium: {
      base: 'text-base',
      heading: 'text-2xl md:text-3xl',
      title: 'text-xl',
      subtitle: 'text-sm',
      button: 'text-base',
    },
    large: {
      base: 'text-lg',
      heading: 'text-3xl md:text-4xl',
      title: 'text-2xl',
      subtitle: 'text-base',
      button: 'text-lg',
    },
  };

  // Fetch profile data with proper image processing
  const fetchProfile = async () => {
    const token = sessionStorage.getItem("token");
    if (!token) {
      navigate('/login');
      return;
    }

    try {
      const response = await axios.get("http://localhost:5000/profile", {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      // Process the data to ensure proper image URLs
      const processedData = {
        ...response.data,
        user: {
          ...response.data.user,
          user_image: response.data.user.user_image || 'https://res.cloudinary.com/docuoohjc/image/upload/v1743067077/userimage_f47hqb.webp'
        },
        posts: response.data.posts.map(post => ({
          ...post,
          image_url: post.image_url || 'https://res.cloudinary.com/docuoohjc/image/upload/v1743161246/noimage_uhgqfc.jpg',
          author: {
            ...post.author,
            user_image: post.author.user_image || 'https://res.cloudinary.com/docuoohjc/image/upload/v1743067077/userimage_f47hqb.webp'
          }
        })),
        savedPosts: response.data.savedPosts.map(saved => ({
          ...saved,
          post: {
            ...saved.post,
            image_url: saved.post.image_url || 'https://res.cloudinary.com/docuoohjc/image/upload/v1743161246/noimage_uhgqfc.jpg',
            author: {
              ...saved.post.author,
              user_image: saved.post.author.user_image || 'https://res.cloudinary.com/docuoohjc/image/upload/v1743067077/userimage_f47hqb.webp'
            }
          }
        }))
      };

      setProfileData(processedData);
      setFormData(prev => ({
        ...prev,
        username: processedData.user.user_name
      }));
    } catch (err) {
      console.error("Error fetching profile:", err);
      
      if (err.response?.status === 401) {
        sessionStorage.removeItem("token");
        navigate('/login');
        toast.error("Session expired", {
          description: "Please login again"
        });
      } else {
        setError(err.response?.data?.error || "Failed to load profile");
        toast.error("Error loading profile", {
          description: err.response?.data?.error || "Please try again later"
        });
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProfile();
  }, []);

  // ... [rest of your existing functions remain the same] ...

  return (
    <div className={`min-h-screen bg-gray-900 text-white p-4 md:p-8 ${fontSizeMap[fontSize].base}`}>
      {/* Header Section */}
      <div className="max-w-4xl mx-auto mb-6 flex justify-between items-center">
        <button 
          onClick={() => navigate(-1)}
          className="flex items-center gap-2 hover:text-green-400 transition-colors"
        >
          <img src={back2} alt="Back" className="w-6 h-6" />
          <span className={fontSizeMap[fontSize].button}>Back</span>
        </button>
        
        <div className="flex items-center gap-2">
          <span className={fontSizeMap[fontSize].subtitle}>Font Size:</span>
          <div className="flex gap-1">
            {['small', 'medium', 'large'].map(size => (
              <button 
                key={size}
                onClick={() => setFontSize(size)}
                className={`px-2 py-1 rounded ${fontSize === size ? 'bg-green-500' : 'bg-gray-700'} ${fontSizeMap[fontSize].button}`}
              >
                {size.charAt(0).toUpperCase()}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Profile Section */}
      <div className="max-w-4xl mx-auto bg-gray-800 rounded-xl p-6 mb-8 shadow-lg relative transition-all duration-300 hover:shadow-2xl">
        {/* ... [profile edit section remains the same] ... */}
        
        <div className="flex flex-col md:flex-row items-center gap-6">
          <div className="relative group">
            <img 
              src={previewImage || profileData.user.user_image}
              alt="Profile"
              className="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover border-2 border-green-500 transition-all duration-300 group-hover:border-green-400"
              onError={(e) => {
                e.target.src = 'https://res.cloudinary.com/docuoohjc/image/upload/v1743067077/userimage_f47hqb.webp';
              }}
            />
            {/* ... [edit mode image upload button] ... */}
          </div>
          
          {/* ... [profile info section] ... */}
        </div>

        {/* ... [password change section] ... */}
      </div>

      {/* Content Tabs */}
      <div className="max-w-4xl mx-auto mb-6 border-b border-gray-700">
        {/* ... [tab buttons] ... */}
      </div>

      {/* Posts Section */}
      <div className="max-w-4xl mx-auto">
        {activeTab === 'posts' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {profileData.posts.length > 0 ? (
              profileData.posts.map(post => (
                <div key={post.id} className="bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 group">
                  <div className="relative h-48 overflow-hidden">
                    <img
                      src={post.image_url}
                      alt={post.title}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      onError={(e) => {
                        e.target.src = 'https://res.cloudinary.com/docuoohjc/image/upload/v1743161246/noimage_uhgqfc.jpg';
                      }}
                    />
                  </div>
                  <div className="p-4">
                    <h3 className={`font-bold mb-2 ${fontSizeMap[fontSize].title} group-hover:text-green-400 transition-colors`}>{post.title}</h3>
                    <p className={`text-gray-400 line-clamp-2 mb-4 ${fontSizeMap[fontSize].subtitle}`}>{post.content}</p>
                    <div className="flex justify-between items-center">
                      <span className={`text-gray-500 ${fontSizeMap[fontSize].subtitle}`}>
                        {new Date(post.createdAt).toLocaleDateString()}
                      </span>
                      <div className="flex gap-2">
                        <button 
                          onClick={() => navigate(`/editpost/${post.id}`)}
                          className="text-gray-400 hover:text-green-400 transition-colors p-1 rounded-full hover:bg-gray-700"
                          title="Edit Post"
                        >
                          <Edit size={18} />
                        </button>
                        <button 
                          onClick={() => handleDeletePost(post.id)}
                          className="text-gray-400 hover:text-red-400 transition-colors p-1 rounded-full hover:bg-gray-700"
                          title="Delete Post"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className={`col-span-full text-center py-12 text-gray-400 ${fontSizeMap[fontSize].title}`}>
                You haven't created any posts yet
              </div>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {profileData.savedPosts.length > 0 ? (
              profileData.savedPosts.map(saved => (
                <div key={saved.id} className="bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 group">
                  <div className="relative h-48 overflow-hidden">
                    <img
                      src={saved.post.image_url}
                      alt={saved.post.title}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      onError={(e) => {
                        e.target.src = 'https://res.cloudinary.com/docuoohjc/image/upload/v1743161246/noimage_uhgqfc.jpg';
                      }}
                    />
                  </div>
                  <div className="p-4">
                    <h3 className={`font-bold mb-2 ${fontSizeMap[fontSize].title} group-hover:text-green-400 transition-colors`}>{saved.post.title}</h3>
                    <p className={`text-gray-400 line-clamp-2 mb-4 ${fontSizeMap[fontSize].subtitle}`}>{saved.post.content}</p>
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-2">
                        <img 
                          src={saved.post.author.user_image} 
                          alt={saved.post.author.user_name}
                          className="w-6 h-6 rounded-full object-cover"
                          onError={(e) => {
                            e.target.src = 'https://res.cloudinary.com/docuoohjc/image/upload/v1743067077/userimage_f47hqb.webp';
                          }}
                        />
                        <span className={`text-gray-400 ${fontSizeMap[fontSize].subtitle}`}>
                          {saved.post.author.user_name}
                        </span>
                      </div>
                      <span className={`text-gray-500 ${fontSizeMap[fontSize].subtitle}`}>
                        Saved on {new Date(saved.createdAt).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className={`col-span-full text-center py-12 text-gray-400 ${fontSizeMap[fontSize].title}`}>
                You haven't saved any posts yet
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfilePage;